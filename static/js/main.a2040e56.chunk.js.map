{"version":3,"sources":["components/CellFillingList/index.module.css","components/CellFillingPage/index.module.css","components/Wrapper/index.module.css","components/Button/index.module.css","components/App/index.module.css","reportWebVitals.ts","helpers/class-names.ts","components/Wrapper/index.tsx","components/CellFillingList/index.tsx","components/Button/index.tsx","components/CellFillingPage/index.tsx","components/App/index.tsx","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","catch","console","error","composeClassNames","classNames","filter","Boolean","join","Wrapper","className","children","style","outerContainer","innerContainer","itemMap","name","description","aliveCell","deadCell","life","CellFillingList","items","map","id","type","item","Button","props","otherProps","container","getRandomOfTwo","a","b","Math","random","defineLastElementIsAliveCell","length","defineTwoLastElementsAreDeadCells","getItemsWithoutLastLife","isLifeRemoved","reduceRight","acc","CellFillingPage","lastId","useRef","useState","setItems","createItem","current","heading","list","button","onClick","newItems","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a2040e56.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"outerContainer\":\"CellFillingList_outerContainer__1-xxZ\",\"innerContainer\":\"CellFillingList_innerContainer__3bLr8\",\"item\":\"CellFillingList_item__3ULFn\",\"aliveCell\":\"CellFillingList_aliveCell__206We\",\"deadCell\":\"CellFillingList_deadCell__i8WvT\",\"life\":\"CellFillingList_life__3MQD_\",\"name\":\"CellFillingList_name__2H-K5\",\"description\":\"CellFillingList_description__2X-gz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CellFillingPage_container__2vPTu\",\"heading\":\"CellFillingPage_heading__2AbHN\",\"list\":\"CellFillingPage_list__1K_d2\",\"button\":\"CellFillingPage_button__1_QCL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"outerContainer\":\"Wrapper_outerContainer__EncuF\",\"innerContainer\":\"Wrapper_innerContainer__3PW7l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Button_container__20Yby\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2oUcM\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals')\n      .then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n        getCLS(onPerfEntry);\n        getFID(onPerfEntry);\n        getFCP(onPerfEntry);\n        getLCP(onPerfEntry);\n        getTTFB(onPerfEntry);\n      })\n      .catch(console.error);\n  }\n};\n\nexport default reportWebVitals;\n","const composeClassNames = (...classNames: Array<string | undefined | false | null>) =>\n  classNames.filter(Boolean).join(' ');\n\nexport { composeClassNames };\n","import style from './index.module.css';\n\nimport { composeClassNames } from '../../helpers/class-names';\n\ntype Props = React.PropsWithChildren<{\n  className?: string;\n}>;\n\nconst Wrapper: React.FC<Props> = ({ className, children }) => (\n  <div className={style.outerContainer}>\n    <div className={composeClassNames(style.innerContainer, className)}>\n      {children}\n    </div>\n  </div>\n);\n\nexport default Wrapper;\n","import { composeClassNames } from '../../helpers/class-names';\nimport { ListItemInfo, ListItemType } from '../../typings/cell-list';\n\nimport style from './index.module.css';\n\ntype Item = {\n  id: string | number;\n  type: ListItemType;\n};\ntype Props = {\n  className?: string;\n  items: Item[];\n};\n\nconst itemMap: Record<ListItemType, ListItemInfo> = {\n  'alive-cell': {\n    name: 'Живая',\n    description: 'и шевелится!',\n    className: style.aliveCell,\n  },\n  'dead-cell': {\n    name: 'Мертвая',\n    description: 'или прикидывается',\n    className: style.deadCell,\n  },\n  'life': {\n    name: 'Жизнь',\n    description: 'Ку-ку!',\n    className: style.life,\n  },\n};\n\nconst CellFillingList: React.FC<Props> = ({ className, items }) => (\n  <div className={style.outerContainer}>\n    <ul className={composeClassNames(style.innerContainer, className)}>\n      {items.map(({ id, type }) => {\n        const { name, description, className } = itemMap[type];\n\n        return (\n          <li key={id} className={composeClassNames(style.item, className)}>\n            <h2 className={style.name}>{name}</h2>\n            <p className={style.description}>{description}</p>\n          </li>\n        );\n      })}\n    </ul>\n  </div>\n);\n\nexport type { Item };\nexport default CellFillingList;\n","import { composeClassNames } from '../../helpers/class-names';\n\nimport style from './index.module.css';\n\nconst Button: React.FC<React.ButtonHTMLAttributes<HTMLButtonElement>> = (props) => {\n  const { className, ...otherProps } = props;\n\n  return (\n    <button\n      className={composeClassNames(style.container, className)}\n      {...otherProps}\n    >\n      {props.children}\n    </button>\n  );\n};\n\nexport default Button;\n","import { useRef, useState } from 'react';\n\nimport { ListItemType } from '../../typings/cell-list';\nimport Wrapper from '../Wrapper';\nimport CellFillingList, { Item } from '../CellFillingList';\nimport Button from '../Button';\n\nimport style from './index.module.css';\n\nconst CellFillingPage: React.FC = () => {\n  const lastId = useRef<number>(0);\n  const [items, setItems] = useState<Item[]>([]);\n\n  const createItem = (type: ListItemType) => ({\n    id: ++lastId.current,\n    type,\n  });\n\n  const onCreateClick = () => {\n    const type = getRandomOfTwo('alive-cell', 'dead-cell');\n\n    const newItems = [\n      // Remove life by condition\n      ...(type === 'dead-cell' && defineTwoLastElementsAreDeadCells(items)\n        ? getItemsWithoutLastLife(items)\n        : items\n      ),\n      // Add new item\n      createItem(type),\n      // Create life by condition\n      ...(type === 'alive-cell' && defineLastElementIsAliveCell(items)\n        ? [createItem('life')]\n        : []\n      ),\n    ];\n\n    setItems(newItems);\n  };\n\n  return (\n    <Wrapper className={style.container}>\n      <h1 className={style.heading}>Клеточное наполнение</h1>\n      <CellFillingList className={style.list} items={items} />\n      <Button className={style.button} onClick={onCreateClick}>СОТВОРИТЬ</Button>\n    </Wrapper>\n  );\n};\n\nconst getRandomOfTwo = <A, B> (a: A, b: B) => Math.random() < 0.5 ? a : b;\n\nconst defineLastElementIsAliveCell = (items: Item[]) => items[items.length - 1]?.type === 'alive-cell';\nconst defineTwoLastElementsAreDeadCells = (items: Item[]) =>\n  items[items.length - 1]?.type === 'dead-cell' && items[items.length - 2]?.type === 'dead-cell';\n\nconst getItemsWithoutLastLife = (items: Item[]) => {\n  let isLifeRemoved = false;\n\n  return items.reduceRight<Item[]>((acc, item) => {\n    if (!isLifeRemoved && item.type === 'life') {\n      isLifeRemoved = true;\n      return acc;\n    }\n    return [item, ...acc];\n  }, []);\n};\n\nexport default CellFillingPage;\n","import CellFillingPage from '../CellFillingPage';\n\nimport style from './index.module.css';\n\nconst App: React.FC = () => (\n  <div className={style.container}>\n    <CellFillingPage />\n  </div>\n);\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\n\nimport reportWebVitals from './reportWebVitals';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}